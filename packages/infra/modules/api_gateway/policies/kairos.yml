openapi: 3.0.1
info:
  title: Storage
  description: |
    API for Storage
  version: "1.0"
paths:
  /grocery_list/items:
    get:
      x-amazon-apigateway-integration:
        httpMethod: POST
        type: AWS_PROXY
        uri: ${get_grocery_items}
        passthroughBehavior: when_no_match
        contentHandling: CONVERT_TO_TEXT
      responses:
        200:
          description: Grocery list items retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/details"
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/details"
        required: true
      x-amazon-apigateway-request-validator: Validate body
      x-amazon-apigateway-integration:
        httpMethod: POST
        type: AWS_PROXY
        uri: ${add_grocery_item}
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
      responses:
        201:
          description: Grocery item added successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/details"
        400:
          description: Incorrect grocery item details
    delete:
      x-amazon-apigateway-integration:
        httpMethod: POST
        type: AWS_PROXY
        uri: ${delete_grocery_items}
        passthroughBehavior: when_no_match
        contentHandling: CONVERT_TO_TEXT
      responses:
        200:
          description: Grocery items removed
        400:
          description: Incorrect grocery item details
    options:
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE, PUT'"
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: "when_no_match"
        type: "mock"
  /grocery_list/items/{id}:
    delete:
      x-amazon-apigateway-integration:
        httpMethod: POST
        type: AWS_PROXY
        uri: ${delete_grocery_item}
        passthroughBehavior: when_no_match
        contentHandling: CONVERT_TO_TEXT
      responses:
        200:
          description: Item removed
        404:
          description: Item does not exist
    options:
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Identifier of the item to be removed
          example: "c8aef3a0-ead3-4e64-b9ce-4ece324720fb"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE, POST'"
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: "when_no_match"
        type: "mock"
  /grocery_list/items_defaults:
    get:
      x-amazon-apigateway-integration:
        httpMethod: POST
        type: AWS_PROXY
        uri: ${get_grocery_items_defaults}
        passthroughBehavior: when_no_match
        contentHandling: CONVERT_TO_TEXT
      responses:
        200:
          description: Grocery items defaults retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/groceryItemsDefaults"
  /noise_tracking:
    get:
      x-amazon-apigateway-integration:
        httpMethod: POST
        type: AWS_PROXY
        uri: ${get_noise_tracking_items}
        passthroughBehavior: when_no_match
        contentHandling: CONVERT_TO_TEXT
      responses:
        200:
          description: Noise tracking items retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/noiseTrackingItem"
    put:
      x-amazon-apigateway-integration:
        httpMethod: POST
        type: AWS_PROXY
        uri: ${add_noise_tracking_item}
        passthroughBehavior: when_no_match
        contentHandling: CONVERT_TO_TEXT
      responses:
        201:
          description: Noise tracking item added successfully 
        500:
          description: Error adding noise tracking item
    options:
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'PUT'"
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: "when_no_match"
        type: "mock"
  /noise_tracking/items/{timestamp}:
    delete:
      x-amazon-apigateway-integration:
        httpMethod: POST
        type: AWS_PROXY
        uri: ${delete_noise_tracking_item}
        passthroughBehavior: when_no_match
        contentHandling: CONVERT_TO_TEXT
      responses:
        200:
          description: Noise tracking item removed
        404:
          description: Noise tracking item does not exist
    options:
      parameters:
        - in: path
          name: timestamp
          schema:
            type: number
          required: true  
          description: Timestamp of the noise tracking item to be removed
          example: 1714003200000
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: "when_no_match"
        type: "mock"
  /todo_list/items:
    post:
      x-amazon-apigateway-integration:
        httpMethod: POST
        type: AWS_PROXY
        uri: ${add_todo_item}
        passthroughBehavior: when_no_match
        contentHandling: CONVERT_TO_TEXT
      responses:
        201:
          description: Todo item added successfully
        500:
          description: Error adding todo item
    options:
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST'"
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: '{"statusCode": 200}'
components:
  schemas:
    details:
      title: Grocery Item Details
      required:
        - id
        - name
      type: object
      properties:
        id:
          type: string
          example: "123123"
        name:
          type: string
          example: Paper Towel
        quantity:
          type: number
          example: 5
    noiseTrackingItem:
      title: Noise Tracking Item
      type: object
      required:
        - timestamp
      properties:
        timestamp:
          type: number
    groceryItemsDefaults:
      title: Grocery Items Defaults
      type: object
      required:
        - name
      properties:
        name:
          type: string
        unit:
          type: string
        icon:
          type: string
x-amazon-apigateway-request-validators:
  Validate body:
    validateRequestParameters: false
    validateRequestBody: true
