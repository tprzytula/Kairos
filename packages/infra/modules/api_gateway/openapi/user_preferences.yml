openapi: "3.0.1"
info:
  title: User Preferences API
  description: API for managing user preferences
  version: "1.0"
paths:
  /user/preferences:
    get:
      summary: Get user preferences
      security:
        - CognitoAuthorizer: []
      responses:
        "200":
          description: "User preferences"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/userPreferences"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal server error"
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "${lambda_functions.get_user_preferences.invoke_arn}"
        passthroughBehavior: "when_no_match"
    put:
      summary: Update user preferences
      security:
        - CognitoAuthorizer: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/updateUserPreferencesRequest"
      responses:
        "200":
          description: "Preferences updated successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/userPreferences"
        "400":
          description: "Invalid request"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal server error"
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "${lambda_functions.update_user_preferences.invoke_arn}"
        passthroughBehavior: "when_no_match"
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET, PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Project-ID'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: "when_no_match"
        type: "mock"
components:
  schemas:
    userPreferences:
      type: object
      required:
        - userId
        - lastUpdated
      properties:
        userId:
          type: string
        currentProjectId:
          type: string
        lastUpdated:
          type: number
    updateUserPreferencesRequest:
      type: object
      properties:
        currentProjectId:
          type: string
  securitySchemes:
    CognitoAuthorizer:
      type: apiKey
      name: Authorization
      in: header
      x-amazon-apigateway-authtype: cognito_user_pools
      x-amazon-apigateway-authorizer:
        type: cognito_user_pools
        providerARNs:
          - ${cognito_user_pool_arn}
x-amazon-apigateway-request-validators:
  Validate body:
    validateRequestParameters: false
    validateRequestBody: true
