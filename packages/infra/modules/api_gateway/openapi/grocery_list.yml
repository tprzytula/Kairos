openapi: 3.0.1
info:
  title: Grocery List
  description: |
    API for Grocery List
  version: "1.0"
paths:
  /grocery_list/items:
    get:
      security:
        - CognitoAuthorizer: []
      parameters:
        - $ref: "#/components/parameters/ProjectIDHeader"
      x-amazon-apigateway-integration:
        httpMethod: POST
        type: AWS_PROXY
        uri: ${lambda_functions["get_grocery_items"].invoke_arn}
        passthroughBehavior: when_no_match
        contentHandling: CONVERT_TO_TEXT
      responses:
        200:
          description: Grocery list items retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/details"
    put:
      security:
        - CognitoAuthorizer: []
      parameters:
        - $ref: "#/components/parameters/ProjectIDHeader"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/details"
        required: true
      x-amazon-apigateway-request-validator: Validate body
      x-amazon-apigateway-integration:
        httpMethod: POST
        type: AWS_PROXY
        uri: ${lambda_functions["add_grocery_item"].invoke_arn}
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
      responses:
        201:
          description: Grocery item added successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/details"
        400:
          description: Incorrect grocery item details
    delete:
      security:
        - CognitoAuthorizer: []
      parameters:
        - $ref: "#/components/parameters/ProjectIDHeader"
      x-amazon-apigateway-integration:
        httpMethod: POST
        type: AWS_PROXY
        uri: ${lambda_functions["delete_grocery_items"].invoke_arn}
        passthroughBehavior: when_no_match
        contentHandling: CONVERT_TO_TEXT
      responses:
        200:
          description: Grocery items removed
        400:
          description: Incorrect grocery item details
    options:
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET, DELETE, PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Project-ID'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: "when_no_match"
        type: "mock"
  /grocery_list/items/{id}:
    patch:
      security:
        - CognitoAuthorizer: []
      parameters:
        - $ref: "#/components/parameters/ProjectIDHeader"
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Identifier of the item to be updated
          example: "c8aef3a0-ead3-4e64-b9ce-4ece324720fb"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  example: "c8aef3a0-ead3-4e64-b9ce-4ece324720fb"
                name:
                  type: string
                  example: "Organic Apples"
                quantity:
                  type: string
                  example: "5"
                unit:
                  type: string
                  example: "kg"
                imagePath:
                  type: string
                  example: "/images/apples.png"
              required:
                - id
        required: true
      x-amazon-apigateway-request-validator: Validate body
      x-amazon-apigateway-integration:
        httpMethod: POST
        type: AWS_PROXY
        uri: ${lambda_functions["update_grocery_item"].invoke_arn}
        passthroughBehavior: when_no_match
        contentHandling: CONVERT_TO_TEXT
      responses:
        200:
          description: Item updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "c8aef3a0-ead3-4e64-b9ce-4ece324720fb"
                  name:
                    type: string
                    example: "Organic Apples"
                  quantity:
                    type: string
                    example: "5"
                  unit:
                    type: string
                    example: "kg"
                  imagePath:
                    type: string
                    example: "/images/apples.png"
        400:
          description: Incorrect item details
    delete:
      security:
        - CognitoAuthorizer: []
      parameters:
        - $ref: "#/components/parameters/ProjectIDHeader"
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Identifier of the item to be removed
          example: "c8aef3a0-ead3-4e64-b9ce-4ece324720fb"
      x-amazon-apigateway-integration:
        httpMethod: POST
        type: AWS_PROXY
        uri: ${lambda_functions["delete_grocery_item"].invoke_arn}
        passthroughBehavior: when_no_match
        contentHandling: CONVERT_TO_TEXT
      responses:
        200:
          description: Item removed
        404:
          description: Item does not exist
    options:
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Identifier of the item to be removed
          example: "c8aef3a0-ead3-4e64-b9ce-4ece324720fb"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE, POST, PATCH'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Project-ID'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: "when_no_match"
        type: "mock"
  /grocery_list/items_defaults:
    get:
      security:
        - CognitoAuthorizer: []
      x-amazon-apigateway-integration:
        httpMethod: POST
        type: AWS_PROXY
        uri: ${lambda_functions["get_grocery_items_defaults"].invoke_arn}
        passthroughBehavior: when_no_match
        contentHandling: CONVERT_TO_TEXT
      responses:
        200:
          description: Grocery items defaults retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/groceryItemsDefaults"
    options:
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Project-ID'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: "when_no_match"
        type: "mock"
components:
  parameters:
    ProjectIDHeader:
      name: X-Project-ID
      in: header
      required: true
      schema:
        type: string
      description: Project ID for multi-tenancy data isolation
  schemas:
    details:
      title: Grocery Item Details
      required:
        - name
      type: object
      properties:
        id:
          type: string
          example: "123123"
        name:
          type: string
          example: Paper Towel
        quantity:
          type: string
          example: "5"
        unit:
          type: string
          example: "kg"
        imagePath:
          type: string
          example: "/images/paper-towel.png"
        category:
          type: string
          example: "household"
    groceryItemsDefaults:
      title: Grocery Items Defaults
      type: object
      required:
        - name
      properties:
        name:
          type: string
        unit:
          type: string
        icon:
          type: string
  securitySchemes:
    CognitoAuthorizer:
      type: apiKey
      name: Authorization
      in: header
      x-amazon-apigateway-authtype: cognito_user_pools
      x-amazon-apigateway-authorizer:
        type: cognito_user_pools
        providerARNs:
          - ${cognito_user_pool_arn}
x-amazon-apigateway-request-validators:
  Validate body:
    validateRequestParameters: false
    validateRequestBody: true
