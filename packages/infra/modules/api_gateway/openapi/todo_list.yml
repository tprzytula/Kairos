openapi: 3.0.1
info:
  title: Todo List
  description: |
    API for Todo List
  version: "1.0"
paths:
  /todo_list/items:
    get:
      x-amazon-apigateway-integration:
        httpMethod: POST
        type: AWS_PROXY
        uri: ${lambda_functions["get_todo_items"].invoke_arn}
        passthroughBehavior: when_no_match
        contentHandling: CONVERT_TO_TEXT
      responses:
        200:
          description: Todo items retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/todoItem"
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/todoItem"
        required: true
      x-amazon-apigateway-request-validator: Validate body
      x-amazon-apigateway-integration:
        httpMethod: POST
        type: AWS_PROXY
        uri: ${lambda_functions["add_todo_item"].invoke_arn}
        passthroughBehavior: when_no_match
        contentHandling: CONVERT_TO_TEXT
      responses:
        201:
          description: Todo item added successfully
        500:
          description: Error adding todo item
    post:
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/todoItem"
        required: true
      x-amazon-apigateway-request-validator: Validate body
      x-amazon-apigateway-integration:
        httpMethod: POST
        type: AWS_PROXY
        uri: ${lambda_functions["update_todo_items"].invoke_arn}
        passthroughBehavior: when_no_match
        contentHandling: CONVERT_TO_TEXT
      responses:
        200:
          description: Todo items updated
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/todoItem"
        500:
          description: Error updating todo items
        400:
          description: Invalid request body
    delete:
      x-amazon-apigateway-integration:
        httpMethod: POST
        type: AWS_PROXY
        uri: ${lambda_functions["delete_todo_item"].invoke_arn}
        passthroughBehavior: when_no_match
        contentHandling: CONVERT_TO_TEXT
      responses:
        200:
          description: Todo item removed
        404:
          description: Todo item does not exist
    options:
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST, PUT, DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: "when_no_match"
        type: "mock"
  /todo_list/items/{id}:
    patch:
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Identifier of the todo item to be updated
          example: "c8aef3a0-ead3-4e64-b9ce-4ece324720fb"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  example: "c8aef3a0-ead3-4e64-b9ce-4ece324720fb"
                name:
                  type: string
                  example: "Complete project documentation"
                description:
                  type: string
                  example: "Finish writing the user guide and API documentation"
                dueDate:
                  type: number
                  example: 1672531200
                isDone:
                  type: boolean
                  example: false
              required:
                - id
        required: true
      x-amazon-apigateway-request-validator: Validate body
      x-amazon-apigateway-integration:
        httpMethod: POST
        type: AWS_PROXY
        uri: ${lambda_functions["update_todo_item"].invoke_arn}
        passthroughBehavior: when_no_match
        contentHandling: CONVERT_TO_TEXT
      responses:
        200:
          description: Todo item updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "c8aef3a0-ead3-4e64-b9ce-4ece324720fb"
                  name:
                    type: string
                    example: "Complete project documentation"
                  description:
                    type: string
                    example: "Finish writing the user guide and API documentation"
                  dueDate:
                    type: number
                    example: 1672531200
                  isDone:
                    type: boolean
                    example: false
        400:
          description: Incorrect todo item details
    options:
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Identifier of the todo item
          example: "c8aef3a0-ead3-4e64-b9ce-4ece324720fb"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'PATCH'"
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: "when_no_match"
        type: "mock"
components:
  schemas:
    todoItem:
      title: Todo Item
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        dueDate:
          type: number
        isDone:
          type: boolean
x-amazon-apigateway-request-validators:
  Validate body:
    validateRequestParameters: false
    validateRequestBody: true
