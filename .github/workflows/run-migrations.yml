name: Run Database Migrations

on:
  workflow_dispatch:
    inputs:
      confirm_execution:
        description: 'Type "CONFIRM" to execute migrations'
        required: true
        type: string

jobs:
  run-migrations:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    
    steps:
      - name: Validate confirmation
        if: github.event.inputs.confirm_execution != 'CONFIRM'
        run: |
          echo "❌ Migrations execution cancelled. You must type 'CONFIRM' to execute migrations."
          exit 1

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE }}
          aws-region: eu-west-2

      - name: Find Lambda Function
        id: find-lambda
        run: |
          echo "🔍 Searching for db_migrations lambda function..."
          FUNCTION_NAME=$(aws lambda list-functions \
            --query "Functions[?starts_with(FunctionName, 'db_migrations_')].FunctionName" \
            --output text)
          
          if [ -z "$FUNCTION_NAME" ]; then
            echo "❌ No db_migrations lambda function found"
            echo "Available functions:"
            aws lambda list-functions --query "Functions[].FunctionName" --output table
            exit 1
          fi
          
          echo "✅ Found function: $FUNCTION_NAME"
          echo "function_name=$FUNCTION_NAME" >> $GITHUB_OUTPUT

      - name: Verify Lambda Function Exists
        run: |
          echo "🔍 Verifying lambda function exists..."
          aws lambda get-function --function-name "${{ steps.find-lambda.outputs.function_name }}" > /dev/null
          echo "✅ Lambda function verified"

      - name: Execute Database Migrations
        id: execute-migrations
        run: |
          echo "🚀 Executing database migrations..."
          echo "Function: ${{ steps.find-lambda.outputs.function_name }}"
          
          # Invoke the lambda function
          aws lambda invoke \
            --function-name "${{ steps.find-lambda.outputs.function_name }}" \
            --payload '{}' \
            --cli-binary-format raw-in-base64-out \
            response.json
          
          echo "📋 Lambda Invoke Response:"
          cat response.json | jq '.'
          
          # Parse the actual migration response from the body
          MIGRATION_BODY=$(cat response.json | jq -r '.body')
          echo "📋 Migration Response Body:"
          echo "$MIGRATION_BODY" | jq '.'
          
          # Check if migrations were successful
          SUCCESS=$(echo "$MIGRATION_BODY" | jq -r '.success // false')
          if [ "$SUCCESS" = "true" ]; then
            echo "✅ Migrations completed successfully"
            MESSAGE=$(echo "$MIGRATION_BODY" | jq -r '.message // "No message"')
            echo "📝 Message: $MESSAGE"
          else
            echo "❌ Migrations failed"
            ERROR_MSG=$(echo "$MIGRATION_BODY" | jq -r '.error // .message // "Unknown error"')
            echo "❌ Error: $ERROR_MSG"
            exit 1
          fi

      - name: Upload Migration Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: migration-results
          path: response.json
          retention-days: 30

      - name: Summary
        if: always()
        run: |
          echo "## Migration Execution Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Function:** ${{ steps.find-lambda.outputs.function_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status:** ${{ steps.execute-migrations.outcome }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Triggered by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Lambda Invoke Response" >> $GITHUB_STEP_SUMMARY
          echo '```json' >> $GITHUB_STEP_SUMMARY
          if [ -f response.json ]; then
            cat response.json | jq '.' >> $GITHUB_STEP_SUMMARY
          else
            echo "No response file generated" >> $GITHUB_STEP_SUMMARY
          fi
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Migration Details" >> $GITHUB_STEP_SUMMARY
          echo '```json' >> $GITHUB_STEP_SUMMARY
          if [ -f response.json ]; then
            MIGRATION_BODY=$(cat response.json | jq -r '.body')
            echo "$MIGRATION_BODY" | jq '.' >> $GITHUB_STEP_SUMMARY
          else
            echo "No migration details available" >> $GITHUB_STEP_SUMMARY
          fi
          echo '```' >> $GITHUB_STEP_SUMMARY