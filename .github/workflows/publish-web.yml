name: Publish Website
on:
  push:
    branches:
      - master
    paths:
      - "packages/web/**"

jobs:
  upload:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: packages/web
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4
      - name: Install Node.js and yarn
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: yarn
          cache-dependency-path: packages/web/yarn.lock
      - name: Install Modules
        run: yarn
      - name: Generate date-based version for PWA updates
        run: |
          # Generate date-based version: YYYY.MM.DD.HHMM  
          NEW_VERSION=$(date -u +"%Y.%m.%d.%H%M")
          
          echo "Generated date-based version: $NEW_VERSION"
          echo "Build time: $(date -u)"
          
          # Update package.json with new date-based version using jq to avoid npm version semver issues
          jq --arg version "$NEW_VERSION" '.version = $version' package.json > package.json.tmp && mv package.json.tmp package.json
          
          echo "VERSION=$NEW_VERSION" >> $GITHUB_ENV
      - name: Commit version bump
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          git add package.json
          git commit -m "üîñ Auto-deploy version $VERSION [skip ci]" || echo "No changes to commit"
          git push || echo "Push failed, continuing with deployment"
        continue-on-error: true
      - name: Build
        run: yarn build
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE }}
          aws-region: eu-west-2
      - name: Copy files to the production website with the AWS CLI
        run: aws s3 sync dist s3://${{ secrets.AWS_S3_WEB_BUCKET }} --delete --include "*" --exclude "assets/*" --acl public-read
      - name: Invalidate CloudFront cache for immediate PWA updates
        run: |
          echo "üîç Debugging CloudFront distribution lookup..."
          
          # First, let's see all distributions
          echo "All CloudFront distributions:"
          aws cloudfront list-distributions --query "DistributionList.Items[*].{Id:Id,Comment:Comment,DomainName:DomainName}" --output table
          
          # Try different possible comment patterns
          echo "üîç Searching for distribution..."
          DISTRIBUTION_ID=$(aws cloudfront list-distributions --query "DistributionList.Items[?Comment=='kairos_web_distribution'].Id" --output text)
          
          if [ -z "$DISTRIBUTION_ID" ]; then
            echo "‚ùå Distribution with comment 'kairos_web_distribution' not found"
            
            # Try alternative patterns
            DISTRIBUTION_ID=$(aws cloudfront list-distributions --query "DistributionList.Items[?contains(Comment, 'kairos')].Id" --output text)
            if [ ! -z "$DISTRIBUTION_ID" ]; then
              echo "‚úÖ Found distribution with 'kairos' in comment: $DISTRIBUTION_ID"
            else
              # Try looking for web-related distributions
              DISTRIBUTION_ID=$(aws cloudfront list-distributions --query "DistributionList.Items[?contains(Comment, 'web')].Id" --output text)
              if [ ! -z "$DISTRIBUTION_ID" ]; then
                echo "‚úÖ Found distribution with 'web' in comment: $DISTRIBUTION_ID"
              else
                # Last resort: get the first distribution if there's only one
                DISTRIBUTION_COUNT=$(aws cloudfront list-distributions --query "length(DistributionList.Items)" --output text)
                if [ "$DISTRIBUTION_COUNT" == "1" ]; then
                  DISTRIBUTION_ID=$(aws cloudfront list-distributions --query "DistributionList.Items[0].Id" --output text)
                  echo "‚úÖ Using single distribution found: $DISTRIBUTION_ID"
                fi
              fi
            fi
          else
            echo "‚úÖ Found distribution: $DISTRIBUTION_ID"
          fi
          
          if [ ! -z "$DISTRIBUTION_ID" ] && [ "$DISTRIBUTION_ID" != "None" ]; then
            echo "üöÄ Invalidating CloudFront distribution: $DISTRIBUTION_ID"
            echo "üì¶ Deployed version: $VERSION"
            
            # Invalidate all paths for PWA updates
            aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID --paths "/*" "/*.js" "/*.html" "/sw.js" "/manifest.json"
            
            echo "‚úÖ Cache invalidation created for version $VERSION"
            echo "üîÑ PWA clients should receive update notification within 5-10 minutes"
          else
            echo "‚ùå No suitable CloudFront distribution found"
            echo "‚ö†Ô∏è  Continuing deployment without cache invalidation"
            echo "üí° Please check your CloudFront distribution comment or AWS permissions"
            # Don't fail the deployment, just warn
          fi
      - name: Output deployment info
        run: |
          echo "üöÄ Deployment completed!"
          echo "üì¶ Version: $VERSION"
          echo "üåê Service Worker: Updated with new cache keys"
          echo "üì± PWA Update: iOS and Android clients will be notified"
          
          # Display version info if available
          if [ -f "dist/version.json" ]; then
            echo "üìã Version Details:"
            cat dist/version.json
          fi
